parsing leakfree machen

type for $? (exitstatus) ??
--> vermutung execute-external_commands ist arsch... sollten wir neu machen (sollten wahtscheinlich alles neu machen)

-> quotes entfernen!  aba wanna?

variables expanden? (ab $ +1 bis kein buchstabe mehr)
echo hallo$pATH$HOME

cd - (OLDPWD)
cd ~ (HOME)

echo -nnnnn geht
echo -nnnnna nicht

leaks:
handle_shlvl() itoa leak -> fixed glaub(wir haben noch viele mallocs)
copy_envp gro√üer leak


----- tests that work:
test "asd"ads"ads"
das "asd"  "'     fgd   "t t | sa
 das "asd" "'     fgd   "t t | sa $TEST $sa
echo hallo"welt     "hallo
halla <>ads<
$$PATH$HOME|$HOME
ls -la|echo$PATH
echo $PATHhome$HOME" .   hallo $?"     >>'$$?'<<infile>out|$
"$?      "<'""'|   "out"        <<in


----- test that do not work:



handle_expansion() -> wenn in ungeraden single quotes -> nicht expanden, wenn in geraden -> expanden (% 2 == 0). Alles andere $ expanden, wenn nichts zum expanden da, dann remove wort
check_quotes() -> 1. ausere geschlossene double quotes entfernen. single quotes in geschlossenen double quotes bleiben alle.
				  2. ausere geschlossene single quotes entfernen. single quotes in geschlossenen single quotes entfernen. double quotes in geschlossenen single quotes bleiben alle.

'""'test'""' does not work:
"test'"'
-> '""' test '""' does work


/ ---- test cases ----- //
//"$PATH"
//"$PATH""$HOME"
// !!"$HOME"!!"$PATH"!!
//"$$PATH"
//"$PATH$"
//"$PATH$HOME$"
//"$PATH$HOME$$?"
//"$PATH$$$HOME"
//"$?$PATH$$$HOME$?"
//"$$$PATH$$$HOME$$"
//"PATH"
//"$"
//"hallo"
//"aaaaa$PATH"
//"$PATHaaaaa"

"'$HOME'"
-> should expand
